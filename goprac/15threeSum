//func Slice(slice interface{}, less func(i, j int) bool)

func threeSum(nums []int) [][]int {
    return sortThreeSum(nums)
}

func HashThreeSum(nums []int) [][]int {
    set := map[int]bool{}
    
    for _,val := range nums {
        set[val] = true
    } 
    
    res := [][]int{}
    for i,_ := range nums {
        for j,_ := range nums {
            if j > i {
                if set[-1*(nums[i] + nums[j])] == true {
                    res = append(res, []int{nums[i],nums[j],-1*(nums[i] + nums[j])})
                }
            }
        }
    }
    return res
    
}

func sortThreeSum(nums []int) [][]int {
    sort.Slice(nums, func(i,j int) bool {return nums[i] < nums[j]})
    fmt.Println(nums)
    res := [][]int{}
    for i,_ := range nums {
        if i > 0 && nums[i] == nums[i-1] {
            continue
        }
        l := i+1
        r := len(nums)-1
        for l < r {
            if nums[i] + nums[l] + nums[r] == 0 {
                res = append(res,[]int{nums[i],nums[l],nums[r]})
                l++
                r--
                for l < r && nums[l] == nums[l-1] {
                    l++
                }
                for l < r && nums[r] == nums[r+1] {
                    r--
                }
            } else if nums[i] + nums[l] + nums[r] > 0 {
                r--
            } else {
                l++
            }
        }
        
    }
    return res
}

